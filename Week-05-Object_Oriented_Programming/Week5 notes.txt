Notes for week 3

Arrays: Use the [] to create the array. Items are 0 based, (All lists start at 0 not 1).
	Arrays can also use loops to list the information as long as the 0 index is remembered.

	var varTitle = [];  
	    varTitle.push("array information");
	    console.log(varTitle[1]); 


Intermediate Array: Types of Arrays are - Map, Reduce, For Each, filter, Splice. See MDN for full listing.
	Using an Array of names: 
	Maps can create a function for say, length of the information in the array, so, 5 names of 		various length will return 5 numbers counting the letters in the names. Map will 		store the information.
	Reduce uses another function and will accumulate all of the previous executed information, 		so it would add the valuss of the previous 5 numbers of leters in the names. 
	For Each is similar to the Maps, for the list of names example will list the names.
	Filter will create a Boolean method to bring the data requested, Names with 3 letters will
		return x number of names with 3 letters. As any other name wouldn't be 
		letters it would be false and not shown.
	Splice can be used to nodify an array at a later point of the code. Say, remove one of the
 		5 names. 

Functions: Reusable code, instructions which can be reused anytime. the Perameters can be multiple uses but should only be one with multiple functions doing other actions. Return statement will return a concatinated string using the console.log vs what is below and will add information "Welcome, Tom Sawyer or such. Functions should be discriptive verbs for readability.

	function createFullName(firstName, lastName) {
 	   code can be what ever is needed to repeat later, for loop, etc.(){
	}    console.log(firstName + ' ' + lastName);
        }

	createFullName('Tom', 'Sawyer');

		Should return Tom Sawyer.

Objects: Logical structure of data. DVD player: height, width, DVD in tray, etc, 
	var dvdPlayer = {
		height: 3, 
		width: 18,
		depth: 12,
		weight: 7,
		color: 'black'
		dvdName: 'Hackers'
	printDVDName: function(){
			console.log(this.dvdName)
	}

	console.log(dvdPlayer.object attributelike depth)

Equality vs Identity: 
	= assignment operator, I = 2, x = 'happy'. You are this.
	== Equality operator, 2 = 'two', 100 = 'one hundred'. same = close enough.
	=== Identity opreatoy, 2 = 2, 3 =3, 2 is not = 'two'. Strict same = same. 



week 3 quiz sheet.
Select five methods that can be used on an Array and describe the following for each: 1) what the method signature is, 2) what the method does, and 3) why would this method be useful (how could you use it)?

What is the difference between == and ===?

What is a closure and how does it work? Provide an example.


Select five methods that can be used on an Array and describe the following for each: 1) what the method signature is, 2) what the method does, and 3) why would this method be useful (how could you use it)?

While ther are many different array types, I chose the following for this topic: 
.every(), .filer(), .includes(), .map(), .some(). 
.every() will run a test on all objects within the array and return a boolean value as related to the parameters, if you have a variable of 20 and an array with 10 numbers all below 20, the array.every() could be used to confirm all the numbers are below 20 and return a true value, or if asked if the numbers are greater than 20 return as false. It is useful in multiple ways, one of which being checking an array of ages for persons over/under a specific age for gaming, drinking, or any other state age regulated reasons.
.filter() is a method which will pull elements of an array as per the arguments given. So if the array of names has 3 names composed of 3 letters, and those peramiters are added into the function, you will get the 3 names (Tom, Sam, Pat). Fileter can be used to find a specific account name, or even see if there are multiple same entries when there should be single entries  
.includes() function will take a provided parameter and return a boolean responce if the value is inside a given array. If the array is names and you run the .includes() looking for "Jerry" it should return as true, assuming Tom didn't remove Jerry's name from the array. This method can be used to confirm if an array is all like data or if there is something that shouldn't be there, like a list of animals with a car in it.
.map() array can be used to create new arrays from data in existing arrays, commonly used when an array (array1 [1,4,9]) needs to remain the same while adding something to it, say you need a new array with the square roots of array1. .map() would be used to make array2[1,2,3]. 
.some() is a method which tests that at least one item in the array will pass a given parameter. So when run on an array made of numbers [1,2,4,6,8,9] looking for say, prime numbers, it will return as true because at least one number is a prime. If you have an array with multiple objects added into it (Name, age, etc.) you can confiem if at least one of the entries are present. 

Ref: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array


What is the difference between == and ===?

The == is a "loosely equal to" operator it will compare the 2 operands separated by the == operator and return a boolean value if the "loosely" match. So for this example, 2 == "two", 100 =='one hundred' or even (6+1) == (4+3). As long as the operands surrounding the == operator the result will be returned as true. The === on the other hand is a "strict equal to" operator and will only return a valuse of true when the operands are the same. This means the operands can only be of the same type and value, 2 === 2,  "two" === "two" will return true while 2 === "two" would return false as they are not the same type of data even if they are the same value.  

Ref:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness
https://tc39.es/ecma262/#sec-islooselyequal
https://tc39.es/ecma262/#sec-isstrictlyequal